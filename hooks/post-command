#!/bin/bash
set -euo pipefail

# Reads a list from plugin config into a global result array
# Returns success if values were read
plugin_read_list_into_result() {
  result=()

  for prefix in "$@" ; do
    local i=0
    local parameter="${prefix}_${i}"

    if [[ -n "${!prefix:-}" ]] ; then
      echo "ðŸš¨ Plugin received a string for $prefix, expected an array" >&2
      exit 1
    fi

    while [[ -n "${!parameter:-}" ]]; do
      result+=("${!parameter}")
      i=$((i+1))
      parameter="${prefix}_${i}"
    done
  done

  [[ ${#result[@]} -gt 0 ]] || return 1
}


get_os() {
  local OS=`uname -s`
  local REV=`uname -r`
  local MACH=`uname -m`

  if [ "${OS}" = "SunOS" ] ; then
    OS=Solaris
    ARCH=$(uname -p)
    OSSTR="${OS} ${REV}(${ARCH} $(uname -v)"
    echo ${OSSTR}
    return

  elif [ "${OS}" = "AIX" ] ; then
    OSSTR="${OS} $(oslevel) ($(oslevel -r)"
    echo ${OSSTR}
    return

  elif [ "${OS}" = "Linux" ] ; then
    KERNEL=$(uname -r)
    if [ -f /etc/alpine-release ] ; then
      DIST='Alpine'
      PSUEDONAME=$(sed s/.*\(// < /etc/alpine-release | sed s/\)//)
      REV=$(sed s/.*release\ // < /etc/alpine-release | sed s/\ .*//)
    elif [ -f /etc/redhat-release ] ; then
      DIST='RedHat'
      PSUEDONAME=$(sed s/.*\(// < /etc/redhat-release | sed s/\)//)
      REV=$(sed s/.*release\ // < /etc/redhat-release | sed s/\ .*//)
    elif [ -f /etc/SuSE-release ] ; then
      DIST=$(tr "\n" ' ' < /etc/SuSE-release | sed s/VERSION.*//)
      REV=$(tr "\n" ' ' < /etc/SuSE-release| sed s/.*=\ //)
    elif [ -f /etc/mandrake-release ] ; then
      DIST='Mandrake'
      PSUEDONAME=$(sed s/.*\(// < /etc/mandrake-release | sed s/\)//)
      REV=$(sed s/.*release\ // < /etc/mandrake-release | sed s/\ .*//)
    elif [ -f /etc/debian_version ] ; then
      if [ "$(awk -F= '/DISTRIB_ID/ {print $2}' /etc/lsb-release)" = "Ubuntu" ]; then
        DIST="Ubuntu"
      else
        DIST="Debian $(cat /etc/debian_version)"
        REV=""
      fi
    elif [ -f /etc/arch-release ] ; then
      DIST="Arch"
    fi
    if [ -f /etc/UnitedLinux-release ] ; then
      DIST="${DIST}[$(tr "\n" ' ' < /etc/UnitedLinux-release | sed s/VERSION.*//)]"
    fi
    OSSTR="${OS} ${DIST} ${REV}(${PSUEDONAME} ${KERNEL} ${MACH})"
    echo ${OSSTR}
    return

  elif [ "${OS}" == "Darwin" ]; then
    type -p sw_vers &>/dev/null
    [ $? -eq 0 ] && {
      OS=`sw_vers | grep 'ProductName' | cut -f 2`
      VER=`sw_vers | grep 'ProductVersion' | cut -f 2`
      BUILD=`sw_vers | grep 'BuildVersion' | cut -f 2`
      OSSTR="Darwin ${OS} ${VER} ${BUILD}"
    } || {
      OSSTR="MacOSX"
    }
    echo ${OSSTR}
    return
  fi

  echo $(uname -a)
}

get_codecov_uploader() {
  local os=$(get_os)
  local os_array=($os)
  if [ ${os_array[1]} = "Alpine" ]; then
    apk add gnupg
    curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import # One-time step
    curl -Os https://uploader.codecov.io/latest/alpine/codecov
    curl -Os https://uploader.codecov.io/latest/alpine/codecov.SHA256SUM
    curl -Os https://uploader.codecov.io/latest/alpine/codecov.SHA256SUM.sig
    gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
    sha256sum -c codecov.SHA256SUM
    chmod +x codecov
    return
  elif [ ${os_array[0]} = "Linux" ]; then
    curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import # One-time step
    curl -Os https://uploader.codecov.io/latest/linux/codecov
    curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
    curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
    gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
    shasum -a 256 -c codecov.SHA256SUM
    chmod +x codecov
    return
  elif [ ${os_array[1]} = "macOS" ]; then
    curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import # One-time step
    curl -Os https://uploader.codecov.io/latest/macos/codecov
    curl -Os https://uploader.codecov.io/latest/macos/codecov.SHA256SUM
    curl -Os https://uploader.codecov.io/latest/macos/codecov.SHA256SUM.sig
    gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
    shasum -a 256 -c codecov.SHA256SUM
    chmod +x codecov
    return
  fi

  # Support for other OS such as windows will have to be implemented if needed
  echo "Your platform ($os) is not supported."
  exit 1
}

main() {
  if [[ "${BUILDKITE_PLUGIN_CODECOV_SKIP_ON_FAIL:-false}" =~ ^(true|on|1)$ ]] && [[ "${BUILDKITE_COMMAND_EXIT_STATUS}" -ne 0 ]]; then
    echo "Codecov upload is skipped because step failed with status ${BUILDKITE_COMMAND_EXIT_STATUS}"
    exit 0
  fi

  pushd "${BUILDKITE_BUILD_CHECKOUT_PATH}" >/dev/null

  local args=()
  local force_zero_exit="true" # by default this plugin never fails
  if plugin_read_list_into_result BUILDKITE_PLUGIN_CODECOV_ARGS ; then
    for arg in "${result[@]}" ; do
      args+=("${arg}")
      if [[ "${arg}" == "-Z" ]]; then
        force_zero_exit="false"
      fi
    done
  fi

  local ci_env
  ci_env=$(bash <(curl -s -S --connect-timeout 10 --retry 3 --retry-delay 10 https://codecov.io/env))

  codecov_command=./codecov
  get_codecov_uploader

  set +e
  local exit_code  
  docker run \
      $ci_env \
      --label "com.buildkite.job-id=${BUILDKITE_JOB_ID}" \
      --workdir=/workdir \
      --volume=$(pwd):/workdir \
      -it \
      --rm \
      buildpack-deps:jessie-scm \
      bash -c "${codecov_command} ${args[*]:-}"
  exit_code="$?"
  set -e
  popd >/dev/null

  if [[ "${force_zero_exit}" != "true" ]]; then
    exit "${exit_code}"
  fi
}

main "$@"
